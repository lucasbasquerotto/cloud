- name: Cloud - Prepare Context
  hosts: main
  tasks:
    - name: "[cloud - ctx - prepare] - load env"
      include_tasks: "tasks/util/env.yml"
      vars:
        env_stage_title: "prepare"
        env_validate: true

    # prepare the repositories

    - name: "{{ env_title }} - prepare repos (outer)"
      include_tasks: "tasks/prepare_repos/main.yml"
      vars:
        prepare_repos_title: "{{ env_title }} - prepare repos"
        prepare_repos_repos_dict: "{{ env.repos | default({}) }}"
        prepare_repos_ctx_extra_repos: "{{ env_ctx_raw.extra_repos | default([]) }}"
        prepare_repos_nodes: "{{ env_ctx_raw.nodes | default([]) }}"
        prepare_repos_nodes_dict: "{{ env.nodes | default({}) }}"
        prepare_repos_pods_dict: "{{ env.pods | default({}) }}"
        prepare_repos_env_path_map: "{{ env_path_map }}"
        prepare_repos_extra_repos_dir: "{{ env_ctx_dir }}/extra-repos"
        prepare_repos_extra_repos_tmp_dir: "{{ env_ctx_dir }}/extra-repos-tmp"
        prepare_repos_pods_dir: "{{ env_ctx_dir }}/pods"
        prepare_repos_dev_repos_dir: "{{ env_dev_repos_dir }}"
        prepare_repos_secrets_repos_dir: "{{ env_secrets_cloud_dir }}/repos"
      when: not (env_fast_prepare | default(false) | bool)
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    # generate the context data

    - name: "{{ env_title }} - ctx (outer)"
      include_tasks: "tasks/util/ctx.yml"
      vars:
        ctx_validate: true
        ctx_load_node_dependencies: true
        ctx_ignore_unknown_nodes: true
      when: ctx is not defined
      no_log: "{{ env_no_log }}"
      tags: ["no_print"]

    # project configuration (cfg)

    - name: "{{ env_title }} - cfg file (outer)"
      include_tasks: "tasks/util/transfer.yml"
      vars:
        prepare_tmp_default:
          file: "ansible/ansible.cfg"
        transfer_title: "{{ env_title }} - cfg file"
        transfer_list:
          - content: "{{ ctx_data.cfg | default(prepare_tmp_default, true) }}"
            dest: "ansible/ansible.generated.cfg"
            tmp_dest: "{{ env_vars.ctx_dir }}/tmp/ansible.generated.cfg"
            mode: "{{ env_lax | bool | ternary('644', '600') }}"
            no_empty_lines: "{{ env.meta.template_no_empty_lines | default(false) }}"
      no_log: "{{ env_no_log }}"

    # project hosts file (inventory)

    - name: "{{ env_title }} - project_ctx_nodes"
      set_fact:
        project_ctx_nodes: >-
          {{
            ctx_data.nodes
            | default([])
            | selectattr('local', 'equalto', False)
            | map(attribute='name')
            | list
          }}
      no_log: "{{ env_no_log }}"
      tags: ["no_print"]

    - name: "{{ env_title }} - create the hosts backup file, if it doesn't exist"
      copy:
        force: no
        content: ""
        dest: "{{ env_vars.secrets_ctx_dir }}/hosts.backup"
        mode: "{{ env_lax | bool | ternary('644', '600') }}"
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    - name: "{{ env_title }} - hosts file - copy the hosts content temporarily to verify changes"
      include_tasks: "tasks/util/transfer.yml"
      vars:
        transfer_title: "{{ env_title }} - hosts file"
        transfer_input:
          nodes: "{{ ctx_data.nodes | default([]) }}"
        transfer_list:
          - content: "{{ ctx_data.hosts }}"
            dest: "{{ env_vars.secrets_ctx_dir }}/hosts.tmp"
            tmp_dest: "{{ env_vars.secrets_ctx_dir }}/tmp/hosts.tmp"
            mode: "{{ env_lax | bool | ternary('644', '600') }}"
            no_empty_lines: "{{ env.meta.template_no_empty_lines | default(false) }}"
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    - name: >-
        {{ env_title }} - hosts file -
        ensure the inventory contains the nodes names - check
      lineinfile:
        name: "{{ env_vars.secrets_ctx_dir }}/hosts.tmp"
        line: "{{ '[' + tmp_item + ']' }}"
        state: present
      loop: "{{ project_ctx_nodes }}"
      loop_control:
        loop_var: tmp_item
      check_mode: yes
      register: project_ctx_host_info_list
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    - name: >-
        {{ env_title }} - hosts file -
        ensure the inventory contains the nodes names - unknown error
      fail:
        msg: |
          Unknow Error (inventory file with line {{ '[' + tmp_item + ']' }}):
          {{ tmp_result }}
      vars:
        tmp_result: "{{ project_ctx_host_info_list.results[tmp_idx] }}"
      loop: "{{ project_ctx_nodes }}"
      loop_control:
        index_var: tmp_idx
        loop_var: tmp_item
      when: tmp_result is failed
      no_log: "{{ env_no_log }}"
      tags: ["no_print"]

    - name: >-
        {{ env_title }} - hosts file -
        ensure the inventory contains the nodes names - fail
      fail:
        msg: >-
          Ensure the inventory file (hosts) contains a line with the node name
          (ansible group): {{ '[' + tmp_item + ']' }}
      vars:
        tmp_result: "{{ project_ctx_host_info_list.results[tmp_idx] }}"
      loop: "{{ project_ctx_nodes }}"
      loop_control:
        index_var: tmp_idx
        loop_var: tmp_item
      when: tmp_result is changed
      no_log: "{{ env_no_log }}"
      tags: ["no_print"]

    - name: "{{ env_title }} - get the difference of the 2 hosts files (backup and tmp)"
      command: "diff {{ env_vars.secrets_ctx_dir }}/hosts.tmp {{ env_vars.secrets_ctx_dir }}/hosts.backup"
      register: project_ctx_hosts_diff
      failed_when: project_ctx_hosts_diff.rc > 1
      changed_when: project_ctx_hosts_diff.rc == 1
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    - name: "{{ env_title }} - copy the hosts file when changed"
      copy:
        src: "{{ env_vars.secrets_ctx_dir }}/hosts.tmp"
        dest: "{{ env_vars.secrets_ctx_dir }}/hosts"
        mode: "{{ env_lax | bool | ternary('644', '600') }}"
        force: "{{ project_ctx_hosts_diff.changed }}"
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    - name: "{{ env_title }} - backup the hosts file"
      copy:
        src: "{{ env_vars.secrets_ctx_dir }}/hosts.tmp"
        dest: "{{ env_vars.secrets_ctx_dir }}/hosts.backup"
        mode: "{{ env_lax | bool | ternary('644', '600') }}"
      when: project_ctx_hosts_diff.changed
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    # project cloud - playbook run file

    - name: "{{ env_title }} - project_ctx_run_title"
      set_fact:
        project_ctx_run_title: "{{ env_title }} - playbook run file"
        project_ctx_run_src: "{{ env_vars.repo_dir }}/files/run.tpl.yml"
        project_ctx_run_tmp_dest: "{{ env_vars.ctx_dir }}/run.yml"
        project_ctx_run_dest: "{{ env_vars.repo_dir }}/run.yml"
        project_ctx_run_env: "{{ env | combine({}) }}"
        project_ctx_run_ctx_data: "{{ ctx_data | combine({}) }}"
      no_log: "{{ env_no_log }}"
      tags: ["no_print"]

    - name: "{{ project_ctx_run_title }} - create the template directories (tmp and final)"
      file:
        path: "{{ project_ctx_run_item }}"
        state: directory
        mode: "{{ env_lax | bool | ternary('777', '755') }}"
      loop:
        - "{{ project_ctx_run_tmp_dest | dirname }}"
        - "{{ project_ctx_run_dest | dirname }}"
      loop_control:
        loop_var: project_ctx_run_item
      no_log: "{{ env_no_log }}"

    - name: >-
        {{ project_ctx_run_title }} -
        transfer the template to the specified tmp location
        ({{ project_ctx_run_src }} to {{ project_ctx_run_tmp_dest }})
      become: "{{ template_become | default('no') }}"
      template:
        src: "{{ project_ctx_run_src }}"
        dest: "{{ project_ctx_run_tmp_dest }}"
        mode: "{{ env_lax | bool | ternary('666', '600') }}"
        block_end_string: "%>>"
        block_start_string: "<<%"
        variable_end_string: "}>>"
        variable_start_string: "<<{"
      vars:
        env: "<<{ project_ctx_run_env }>>"
        ctx_data: "<<{ project_ctx_run_ctx_data }>>"
        local_params:
          pods_dir: "<<{ env_dev_pods_dir }>>"
          apps_dir: "<<{ env_dev_apps_dir }>>"
          path_map: "<<{ env_path_map }>>"
      changed_when: false
      no_log: "{{ env_no_log }}"

    - name: >-
        {{ project_ctx_run_title }} -
        remove excess of blank lines of the file created from the template
        ({{ project_ctx_run_tmp_dest }})
      replace:
        path: "{{ project_ctx_run_tmp_dest }}"
        regexp: "^\\s*\\n"
        replace: ""
      changed_when: false
      no_log: "{{ env_no_log }}"

    - name: >-
        {{ project_ctx_run_title }} -
        copy the normalized file created from the template to the specified location
        ({{ project_ctx_run_dest }})
      copy:
        remote_src: false
        src: "{{ project_ctx_run_tmp_dest }}"
        dest: "{{ project_ctx_run_dest }}"
        mode: "{{ env_lax | bool | ternary('666', '600') }}"
      no_log: "{{ env_no_log }}"

    # pre prepare nodes (ssh)

    - name: "{{ env_title }} - pre prepare nodes (outer)"
      include_tasks: "tasks/nodes/pre_prepare_node.yml"
      vars:
        pre_prepare_node_title: >-
          {{ env_title }} - pre prepare node [{{ pre_prepare_node_item.description }}]
      loop: "{{ ctx_data.nodes | default([]) }}"
      loop_control:
        loop_var: pre_prepare_node_item
        label: "{{ pre_prepare_node_item.description }}"
      when: not (pre_prepare_node_item.local | bool)
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    # prepare nodes (local)

    - name: "{{ env_title }} - prepare local nodes (outer)"
      include_tasks: "tasks/nodes/prepare.yml"
      vars:
        node_prepare_node: "{{ prepare_item }}"
        node_prepare_title: >-
          {{ env_title }} - prepare local node [{{ node_prepare_node.description }}]
      loop: "{{ ctx_data.local_nodes | default([]) }}"
      loop_control:
        loop_var: prepare_item
        label: "{{ node_prepare_node.description }}"
      when: >-
        (not (env_fast_prepare | default(false) | bool))
        and
        (not (env.meta.skip_local_node_preparation | default(env_dev) | bool))
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    # prepare pods (local)

    - name: "{{ env_title }} - prepare local pods (outer)"
      include_tasks: "tasks/pods/main.yml"
      vars:
        pod_node: "{{ prepare_item }}"
        pod_title: "{{ env_title }} - prepare local pod - node [{{ pod_node.description }}]"
      loop: "{{ ctx_data.local_nodes | default([]) }}"
      loop_control:
        loop_var: prepare_item
        label: "{{ pod_node.description }}"
      when: >-
        (not (env_fast_prepare | default(false) | bool))
        and
        (not (env.meta.skip_local_pod_preparation | default(env_dev) | bool))
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    # run the validators

    - name: "{{ env_title }} - run the validators (outer)"
      include_tasks: "{{ validator_item.task }}"
      vars:
        validator_title: >-
          {{ env_title }} - run validator - {{ validator_item.description }}
      loop: "{{ ctx_data.validators | default([]) }}"
      loop_control:
        index_var: validator_idx
        loop_var: validator_item
        label: "{{ validator_idx }}"
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]
