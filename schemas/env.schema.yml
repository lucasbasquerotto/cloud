root: "env"
schemas:
  env:
    type: "dict"
    description: "environment schema for a deployment / project"
    props:
      name:
        non_empty: true
        type: "str"
        description: "name of the project"
      ctxs:
        required: true
        type: "list"
        elem_type: "str"
        description: "list with the context names that will be executed for this deployment"
      migration:
        type: "str"
        description: >-
          migration identifier; when specified, throws an error if
          it's not specified in the controller parameters, or is different
      container:
        type: "str"
        description: >-
          container image + tag that identifies the container in which
          the deployment will execute; when specified, throws an error if
          it's not specified in the controller parameters, or is different
      ctl_env_schema:
        type: "str"
        description: >-
          schema to validate the environment parameters defined for the project
          in the main environment repository vars.yml file when defined in the
          project environment repository file; will be applied for all contexts
      original_env_schema:
        type: "str"
        description: >-
          schema to validate the environment parameters defined for the project
          in the project environment repository file when defined in the base
          environment repository file; will be applied for all contexts
      meta:
        schema: "meta"
        description: "environment metadata"
      cloud:
        schema: "cloud"
        description: >-
          cloud section; used to extend the contexts in the main section,
          when extend_cloud is true
      main:
        type: "map"
        non_empty: true
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "main"
        description: "dictionary with the environment contexts (that define the deployment)"
      services:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "service"
        description: "dictionary with definitions of services"
      service_shared_group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "shared_group_params"
        description: "services shared_group_params"
      service_shared_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "dict"
        description: "services shared_params"
      service_group_params:
        type: "dict"
        description: "services group_params"
      nodes:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "node"
        description: "dictionary with definitions of nodes"
      node_shared_group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "shared_group_params"
        description: "nodes shared_group_params"
      node_shared_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "dict"
        description: "nodes shared_params"
      node_group_params:
        type: "dict"
        description: "nodes group_params"
      pods:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "pod"
        description: "dictionary with definitions of pods"
      pod_shared_group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "shared_group_params"
        description: "pods shared_group_params"
      pod_shared_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "dict"
        description: "pods shared_params"
      pod_group_params:
        type: "dict"
        description: "pods group_params"
      run_stages:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "run_stage"
        description: >-
          dictionary with definitions of run stages; a run stage is a list of run stage tasks
      run_stage_tasks:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "run_stage_task"
        description: >-
          dictionary with definitions of run stage tasks; a run stage task has information
          about a task and the nodes and pods in which the task will run
      tasks:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "task"
        description: >-
          dictionary with definitions of tasks; these tasks my be declarative tasks
          or shell tasks that will execute in a node or pod, but don't know in which node
          or pod it will run
      task_shared_group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "shared_group_params"
        description: "tasks shared_group_params"
      task_shared_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "dict"
        description: "tasks shared_params"
      task_group_params:
        type: "dict"
        description: "tasks group_params"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: >-
          dictionary with definitions of contents; used for contents with type 'env'
      content_shared_group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "shared_group_params"
        description: "contents shared_group_params"
      content_shared_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "dict"
        description: "contents shared_params"
      content_group_params:
        type: "dict"
        description: "contents group_params"
      repos:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        non_empty: true
        elem_schema: "repo"
        elem_non_empty: true
        description: "dictionary with definitions of source control repositories"
      credentials:
        type: "dict"
        description: >-
          dictionary with definitions of credentials; work similarly to group_params,
          in which credetials sections in other parts of the environment have properties
          whose values will be mapped to the credentials in this dictionary
  meta:
    type: "dict"
    props:
      lax:
        type: "bool"
        description: "makes the permissions of created files and directories less strict"
      no_log:
        type: "bool"
        description: "won't print the ansible plays, tasks and module arguments, as well as outputs"
      ignore_validators:
        type: "bool"
        description: >-
          skip the execution of the validators; defaults to 'dev' (development environment);
          mainly used to make deployments faster, and also if concerned that a validator may
          cause side-effects (they shouldn't)
      skip_local_node_preparation:
        type: "bool"
        description: >-
          skip the local preparation of the nodes in the preparation step; defaults to 'dev'
          (development environment); mainly used as 'true' to make deployments faster and to
          avoid side effects
      skip_local_pod_preparation:
        type: "bool"
        description: >-
          skip the local preparation of the pods in the preparation step; defaults to 'dev'
          (development environment); mainly used as 'true' to make deployments faster and to
          avoid side effects
      template_no_empty_lines:
        type: "bool"
        description: >-
          remove empty lines when transferring templates (defines the default,
          that can be overriden in a case-by-case basis)
      no_node_type_dependency:
        type: "bool"
        description: >-
          throws an error if some node in the context has a node dependency whose type is node
          (this could be used for performance reasons, because if there is a huge number of hosts
          in the project context, iterating through each host to generate the variable with the
          hosts data, like ip, could be expensive)
  cloud:
    type: "dict"
    description: >-
      cloud section schema; used to extend the contexts in the main section,
      when extend_cloud is true
    props:
      repo:
        type: "str"
        description: "repository name of the cloud layer"
      ext_repos:
        type: "list"
        elem_schema: "repo_info"
        description: >-
          list with repository names that extends the main repository of the cloud
          layer and the directories in which the repositories will be cloned
          (relative to the cloud repository)
      collections:
        type: "list"
        elem_schema: "collection"
        description: >-
          list of collections that specifies paths to collections, relative to the
          cloud repository directory, the namespace and, optionally, the collection
          name, so that a symlink pointing to the actual collection (or namespace)
          directory is created, making possible the use of the collection in the
          cloud context steps
      run_file:
        type: "str"
        description: >-
          path, relative to the cloud repository, in which the file to run the
          cloud context steps is located
      cfg:
        schema: "content"
        description: >-
          content that will define the ansible configuration file for this context
          (otherwise a default configuration file will be created)
      hosts:
        schema: "content"
        description: >-
          content that will define the ansible hosts file for this context
      hooks:
        schema: "hooks"
        description: >-
          hooks defining tasks that will run before or after certain stages
          in the deployment
  main:
    type: "dict"
    description: "context schema"
    props:
      extend_cloud:
        type: "bool"
        description: >-
          when true, the properties defined in the cloud section are used
          when the corresponding property is not present in this section
      repo:
        type: "str"
        description: "repository name of the cloud layer"
      ext_repos:
        type: "list"
        elem_schema: "repo_info"
        description: >-
          list of repository names that extends the main context repository
          of the cloud layer and the directories in which they will be cloned
          (relative to the cloud repository)
      collections:
        type: "list"
        elem_schema: "collection"
        description: >-
          list of collections that specifies paths to collections, relative to the
          cloud repository directory, the namespace and, optionally, the collection
          name, so that a symlink pointing to the actual collection (or namespace)
          directory is created, making possible the use of the collection in the
          cloud context steps
      run_file:
        type: "str"
        description: >-
          path, relative to the cloud repository, in which the file to run the
          cloud context steps is located
      ctl_env_schema:
        type: "str"
        description: >-
          schema to validate the environment parameters defined for the project
          in the main environment repository vars.yml file when defined in the
          project environment repository file; will be applied only for this context
      original_env_schema:
        type: "str"
        description: >-
          schema to validate the environment parameters defined for the project
          in the project environment repository file when defined in the base
          environment repository file; will be applied only for this context
      cfg:
        schema: "content"
        description: >-
          content that will define the ansible configuration file for this context
          (otherwise a default configuration file will be created)
      hosts:
        schema: "content"
        description: >-
          content that will define the ansible hosts file for this context
      hooks:
        schema: "hooks"
        description: >-
          hooks defining tasks that will run before or after certain stages
          in the deployment
      initial_services:
        type: "list"
        elem_schema: "main_service_info"
        description: "services that will run at the beginning of the deployment"
      nodes:
        type: "list"
        elem_schema: "main_node_info"
        description: "nodes/hosts that will be created/destroyed"
      final_services:
        type: "list"
        elem_schema: "main_service_info"
        description: "services that will run at the end of the deployment"
      run_stages:
        type: "list"
        elem_schema: "main_stage_info"
        description: "list with run stages for this context"
      extra_repos:
        type: "list"
        elem_schema: "main_extra_repo_info"
        description: >-
          extra source control repositories that will be cloned locally
          (more information in the readme file)
  repo_info:
    type: "dict"
    description: "mapped repository (relative to a location) schema"
    props:
      repo:
        non_empty: true
        type: "str"
        description: "repository name"
      dir:
        non_empty: true
        type: "str"
        description: "path to directory in which the repository will be cloned"
  collection:
    type: "dict"
    description: "hooks schema"
    props:
      namespace:
        type: "str"
        non_empty: true
        regex: "^[-\\w]+$"
        description: "the collection namespace"
      collection:
        type: "str"
        regex: "^[-\\w]+$"
        description: "the collection name"
      path:
        type: "str"
        non_empty: true
        description: "path to the collection, relative to the cloud repository directory"
      mode:
        type: "str"
        regex: "^([0-7]{3})?$"
        description: "the permissions the resulting symlink should have"
      dir_mode:
        type: "str"
        regex: "^([0-7]{3})?$"
        description: "the permissions the resulting symlink parent directory should have"
      absent:
        type: "bool"
        description: "when true, the symlink will be removed, if present"
  hooks:
    type: "dict"
    description: "hooks schema"
    props:
      before_initial_services:
        type: "str"
        description: "path to task that should run before deploying the initial services"
      after_initial_services:
        type: "str"
        description: "path to task that should run after deploying the initial services"
      before_nodes:
        type: "str"
        description: "path to task that should run before creating the nodes/hosts"
      after_nodes:
        type: "str"
        description: "path to task that should run after creating the nodes/hosts"
      before_nodes_setup:
        type: "str"
        description: "path to task that should run before waiting for the nodes/hosts to be ready"
      after_nodes_setup:
        type: "str"
        description: "path to task that should run after waiting for the nodes/hosts to be ready"
      before_prepare_nodes:
        type: "str"
        description: "path to task that should run before preparing the nodes/hosts"
      after_prepare_nodes:
        type: "str"
        description: "path to task that should run after preparing the nodes/hosts"
      before_prepare_pods:
        type: "str"
        description: "path to task that should run before preparing the pods"
      after_prepare_pods:
        type: "str"
        description: "path to task that should run after preparing the pods"
      before_cron:
        type: "str"
        description: "path to task that should run before defining the cron jobs for the nodes/hosts"
      after_cron:
        type: "str"
        description: "path to task that should run after defining the cron jobs for the nodes/hosts"
      before_final_services:
        type: "str"
        description: "path to task that should run before deploying the final services"
      after_final_services:
        type: "str"
        description: "path to task that should run after deploying the final services"
      before_delete_tmp:
        type: "str"
        description: "path to task that should run before destroying the temporary services and hosts (with tmp=true)"
      after_delete_tmp:
        type: "str"
        description: "path to task that should run after destroying the temporary services and hosts (with tmp=true)"
      before_delete_main:
        type: "str"
        description: "path to task that should run before destroying the services and hosts (with can_destroy=true)"
      after_delete_main:
        type: "str"
        description: "path to task that should run after destroying the services and hosts (with can_destroy=true)"
  main_service_info:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      schema for the information about a given service defined directly in the context;
      when defined as a string, it will consider the value to be the service name
    props:
      name:
        type: "str"
        description: >-
          service name, used to identify the service while running it;
          it must be unique in a list of services, otherwise an error will be thrown;
          used as the service key, when the key is not specified
      key:
        type: "str"
        description: >-
          service key, used to identify the service in the services dictionary;
          when not specified, the name will be used as the service key
      when:
        type: "bool"
        description: "when false, the service is ignored (as if it was not defined); defaults to true"
      single:
        type: "bool"
        description: >-
          the service must be a single service, and not a list of services;
          useful in cases in which the service output will be used as input by another service
          (the service name is used to retrieve the previous service input, but in a list,
          the name of the service whose output should be used may not be known directly)
      absent:
        type: "bool"
        description: >-
          when true, deploy the service with the state absent (to destroy the service);
          if the service is a list of services, defines the default 'absent' value for those services
          (will be overriden if explicitly defined in the service)
      tmp:
        type: "bool"
        description: >-
          when true, destroy the service (deploy with state=absent) at the end of the deployment;
          if the service is a list of services, defines the default 'tmp' value for those services
          (will be overriden if explicitly defined in the service)
      can_destroy:
        type: "bool"
        description: >-
          when true, destroy the service (deploy with state=absent) at the end of the deployment
          when the deployment was launched with the --end option (or --tags=destroy); if the service
          is a list of services, defines the default 'can_destroy' value for those services (will be
          overriden if explicitly defined in the service)
      delay_errors:
        type: "bool"
        description: >-
          when true, delays any error that happens in the service (and skips the remaining service tasks),
          failing with an error at the end of the execution; if the service is a list of services, defines
          the default 'delay_errors' value for those services (will be overriden if explicitly defined in
          the service)
      ignore_errors:
        type: "bool"
        description: >-
          when true, ignores any error that happens in the service (and skips the remaining service tasks);
          if the service is a list of services, defines the default 'ignore_errors' value for those services
          (will be overriden if explicitly defined in the service)
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "credential names to override the service credentials"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "contents to override the service contents"
      params:
        type: "dict"
        description: >-
          params to override the service parameters;
          can only be used for single (non-list) services
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: >-
          group_params to override the service parameters;
          can only be used for single (non-list) services
      shared_params:
        type: "list"
        elem_type: "str"
        description: >-
          shared_params to override the service parameters;
          can only be used for single (non-list) services
      shared_group_params:
        type: "str"
        description: >-
          shared_group_params to override the service parameters;
          can only be used for single (non-list) services
  main_node_info:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      schema for the information about a given node; when defined as a string,
      it will consider the value to be the name
    props:
      name:
        type: "str"
        description: >-
          node name, used to identify the node while running it;
          it must be unique in a list of nodes, otherwise an error will be thrown;
          used as the node key, when the key is not specified
      key:
        type: "str"
        description: >-
          node key, used to identify the node in the nodes dictionary;
          when not specified, the name will be used as the node key
      when:
        type: "bool"
        description: "when false, the node is ignored (as if it was not defined); defaults to true"
      local:
        type: "bool"
        description: >-
          when true, means that the node is local;
          used to run the node locally without deploying a remote node;
          a local node doesn't need a service specified in it (and even if it has,
          it will just be ignored; dns service will also be ignored)
      local_node_setup:
        type: "bool"
        description: >-
          by default, a local node skips the step that checks if it can be connected;
          when this property is true, this step will be executed for the local node
          (mainly used for tests, and to make development environments closer to
          staging and production ones)
      local_node_setup_error:
        type: "str"
        choices: ["timeout", "msg"]
        description: >-
          only used when local_node_setup is true, in which case, by default,
          the host test (wait nodes) step is executed successfully;
          when this property is true, it will throw an error when testing for the
          timeout or the final success message in the host, according to the value
          passed to this property (mainly used for tests)
      external:
        type: "bool"
        description: >-
          when true, means that the node is managed externally;
          used to run tasks in the node and create pods;
          an external node doesn't need a service specified in it (and even if it has,
          it will just be ignored; dns service will also be ignored)
      hostname:
        type: "str"
        description: >-
          when this property is specified, it will identify the host name;
          by default, the name of the host will be the value of the 'name' property
          with a '-host' suffix added (because the node name is used to identify
          the node type, which will be the ansible group, that should be different
          than the ansible host);
          when a node has replicas, that is, more than 1 host for a given node type,
          a suffix '-{index}', where index is the replica index, starting with 1,
          will be added to the host name from the 2nd replica onwards, no matter if
          this hostname property was specified or not (the 1st replica will have the
          hostname without this suffix, so it will have the same name even if newer
          deployments changes the number of replicas)
      amount:
        type: "int"
        description: >-
          amount of node replicas to be created; defaults to 1;
          must be more or equal to 0, and less or equal to max_amount
      max_amount:
        type: "int"
        description: >-
          maximum amount of node replicas to be created/destroyed; defaults to amount;
          when 0, no hosts will be created/destroyed; each replica that has an index
          higher than amount will be destroyed (state=absent); this way, replicas created
          in a previous deployment can
      dependencies:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "main_node_dependency"
        description: "the node dependencies as defined in the inner schema"
      absent:
        type: "bool"
        description: "when true, deploy the node with the state absent (to destroy the node replicas)"
      tmp:
        type: "bool"
        description: >-
          when true, destroy the node replicas (deploy with state=absent) at the end of the deployment
      can_destroy:
        type: "bool"
        description: >-
          when true, destroy the node replicas (deploy with state=absent) at the end of the deployment
          when the deployment was launched with the --end option (or --tags=destroy)
      delay_errors:
        type: "bool"
        description: >-
          when true, delays any error that happens in the node (and skips the remaining node tasks),
          failing with an error at the end of the execution
      ignore_errors:
        type: "bool"
        description: >-
          when true, ignores any error that happens in the node (and skips the remaining node tasks)
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "credential name to override the node credential"
      params:
        type: "dict"
        description: "params to override the node parameters"
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "group_params to override the node parameters"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "shared_params to override the node parameters"
      shared_group_params:
        type: "str"
        description: "shared_group_params to override the node parameters"
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: >-
          contents to be transferred to the node directory in the host (defined by node_dir);
          overrides contents to be transferred defined in the node that have the same destination
      pods:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "main_pod_params_info"
        description: >-
          dictionary in which the keys are pod names defined in the host, and the values may
          be mergeable parameters to override the parameters for the pod defined in the node,
          and also contents to be transferred, to override those defined in the pod information
          in the node
  main_node_dependency:
    type: "simple_dict"
    alternative_schema: "main_node_dependency_host"
    description: >-
      schema for node dependencies; a dictionary in which each property is a name for the dependency,
      and the value can be a string representing the url of the dependency, or a dictionary
      that specifies a node dependency as defined in the nodes section of the context, or a fixed ip,
      with the possibility of a port and a protocol; this will generate a dictionary with the same property
      names, and the values will be a 'single' property (string) with the value of a single host (defined by the
      index of the host that has the dependency; see the node 'amount' and 'max_amount' properties for more
      information about the index), and a 'list' property (list of strings) with the values of all hosts
      specified in the 'host' property
    props:
      when:
        type: "bool"
        description: "when false, the dependency is ignored (as if it was not defined); defaults to true"
      type:
        type: "str"
        non_empty: true
        choices: ["node", "service", "ip", "url"]
        description: |
          node dependency type:
          - node: specifies that the dependency is a node whose name was specified in the nodes section;
          - service: specifies that the dependency is a service whose name was specified in the services section;
          - ip: specifies that the dependency is fixed ip;
          - node: specifies that the dependency is a url, defined by default when the dependency is specified as a string
      required_amount:
        type: "int"
        description: >-
          specifies that at least the specified number of target hosts is defined (also, when type=node, this amount of
          hosts must be higher the number of node replicas, defined by the target node 'amount' property); defaults to 0
          (dependency not required); define it as -1 to require all; gives an error if the amount specified is higher
          than the amount of nodes/services to be created, or the limit property
      node_ip_type:
        type: "str"
        choices: ["private", "ipv4", "ipv6"]
        description: "specifies which ip of the hosts will be used when type=node; defaults to 'private'"
      endpoint_type:
        type: "str"
        choices: ["private", "public"]
        description: "specifies which endpoint will be used when type=service; defaults to 'private'"
      limit:
        type: "int"
        description: >-
          specifies the limit of hosts for a specific node instance; defaults to 1; define it as -1 to allow any amount;
          for type=node, the node section in the environment context specifies the node type (ansible host groups), while
          the amount defined for the node (1 by default) specifies the number of hosts that will be created;
          if a node 'node1' specifies a node 'node2' as a dependency, and node2 has amount=5 (will have 5
          replicas/hosts), then by default the 1st host of node1 will have as dependency the 1st host
          of node2, the 2nd host of node1 will have as dependency the 2nd host of node2, and so on; the
          same dependency of node2 may be used by different hosts of node1 if the amount of node2 hosts
          is less than the amount of node1, and may not be used at all if the amount of node2 hosts
          is more than the amount of node1; if limit is 2, then the 1st and 2nd hosts of node1 will reference
          the 1st and 2nd hosts of node2, and so on, in a similar fashion as how is done for limit=1; if limit
          is more than the amount of node2, then the limit will (actually) be considered to be the amount of node2;
          when type=service, then the list of services defined for that service will define the target amount,
          and it will behave similar with a node with the same amount of replicas (that is, node1 pointing to
          service1 that has a list of 5 services in it will behave as node1 pointing to node2 with 5 replicas);
          the same logic applies when type is ip and url, except that the hosts are already defined previously,
          with the limit applied on a per-host basis (the host that depends), based on the (ansible) host index
      host:
        schema: "main_node_dependency_host"
        required: true
        description: |
          the target host dependency; can be a single value or a list; the value depends on the type:
          - if type=node, the value is the target node name, or a list of it;
          - if type=service, the value is the target service name, or a list of it;
          - if type=ip, the value is a ip or list of ips;
          - if type=url, the value is a url or list of urls
      protocol:
        type: "str"
        description: >-
          specifies the protocol (for example, http) of the dependency (when type=url, it can be defined either here
          or in the host property); leave it undefined or empty if the protocol should not be used for the dependency
      port:
        type: "int"
        description: >-
          specifies the port (for example, 22) of the dependency (when type=url, it can be defined either here
          or in the host property); leave it undefined or empty if the port should not be used for the dependency
  main_node_dependency_host:
    type: "simple_list"
    elem_type: "str"
    description: "the host of a node dependency; can be a single string value or a list of strings"
  main_stage_info:
    type: "simple_dict"
    main_schema: "run_stage"
    alternative_type: "str"
    description: >-
      run stages information schema; when it's a string, will use the run stage defined in the run_stages
      dictionary (at the topmost layer in the environment file), otherwise it will be an object with a
      'tasks' property and possibly other option
  main_extra_repo_info:
    type: "dict"
    description: "extra repository information schema"
    props:
      repo:
        non_empty: true
        type: "str"
        description: "extra repository name"
      dir:
        non_empty: true
        type: "str"
        description: "extra repository directory"
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: "contents to be transferred to the extra repository directory"
      links:
        type: "list"
        elem_schema: "main_extra_repo_link"
        description: "symlinks to be created in the extra repository directory"
  main_pod_params_info:
    type: "dict"
    description: "pod context information dictionary schema"
    props:
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: >-
          contents to be transferred to the pod repository directory;
          override those defined in the pod information in the node that have
          the same destination; the base directory (when the content type is 'custom'),
          is the pod repository directory
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "credential names to override the pod information credentials in the node"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "contents to override the pod information contents in the node"
      params:
        type: "dict"
        description: "params to override the pod information parameters in the node"
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "group_params to override the pod information parameters in the node"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "shared_params to override the pod information parameters in the node"
      shared_group_params:
        type: "str"
        description: "shared_group_params to override the pod information parameters in the node"
  main_extra_repo_link:
    type: "dict"
    description: "extra repository symlink schema"
    props:
      repo:
        type: "str"
        description: >-
          extra repository whose directory will be the base path for the symlink source (src);
          when not specified, it will be the current extra repository
      src:
        required: true
        type: "str"
        description: "where the symlink will point to"
      dest:
        non_empty: true
        type: "str"
        description: "where the symlink will be created"
  transfer_content:
    type: "dict"
    description: "schema for contents to be transferred"
    props:
      src:
        non_empty: true
        schema: "content"
        description: >-
          the source is the content; the base path (when type=custom)
          depends on where it is defined
      dest:
        non_empty: true
        type: "str"
        description: >-
          the destination file of the content; the base path
          depends on where it is defined
      is_base_dir:
        type: "bool"
        description: >-
          when true and supported by the context, will use the base directory
          of the context, otherwise will behave as if it was false
      mode:
        type: "str"
        regex: "^([0-7]{3})?$"
        description: "the permissions the resulting file should have"
      executable:
        type: "bool"
        description: >-
          when mode is not specified, the default mode for
          the destination file will have the executable bits set (+x)
      dir_mode:
        type: "str"
        regex: "^([0-7]{3})?$"
        description: >-
          the permissions the resulting file parent directory should have
      when:
        type: "bool"
        description: "don't do the transfer when false (the default is true)"
  service:
    type: "dict"
    description: "service schema"
    props:
      list:
        type: "bool"
        description: >-
          when true, specifies that the service is a list of services;
          defaults to false
      services:
        type: "list"
        elem_schema: "service_info"
        description: "list of services informations (when list=true)"
      base_dir:
        type: "str"
        description: >-
          (when list=false) service base directory to locate the service task;
          will be passed to the service task as a variable that can be used
          include other tasks relative to this base path
      task:
        type: "str"
        description: >-
          (when list=false) service task (will deploy the service when
          state=present and destroy it when state=absent); the path should be
          relative to 'base_dir'
      namespace:
        type: "str"
        description: >-
          (when list=false) the namespace used as prefix when creating ansible
          facts in the service task (when a service calls another with the same
          namespace, it will throw an error with this information, which could,
          otherwise, cause unexpected problems due to facts overridden by an inner
          service, because ansible facts are global to the host); although not
          required in this schema, services may enforce the use of namespace
      schema:
        type: "simple_list"
        elem_type: "str"
        elem_required: true
        description: >-
          (when list=false) service task schema (or list of schemas); will validate
          the parameters, credentials and contents that will be passed to the service;
          the path should be relative to 'base_dir'
      validator:
        type: "simple_list"
        elem_type: "str"
        elem_required: true
        description: >-
          (when list=false) service task validator (or list of validators); will validate
          the parameters, credentials and contents that will be passed to the service;
          the path should be relative to 'base_dir'; this validation is dynamic, the string
          value should be the task file path that will do the validation
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: >-
          (when list=false) service credential names dictionary (used as group_params)
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "(when list=false) service contents dictionary"
      params:
        type: "dict"
        description: "(when list=false) service params (mergeable parameters)"
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "(when list=false) service group_params (mergeable parameters)"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "(when list=false) service shared_params (mergeable parameters)"
      shared_group_params:
        type: "str"
        description: "(when list=false) service shared_group_params (mergeable parameters)"
  service_info:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      schema for the information about a given service;
      when defined as a string, it will consider the value to be the service name
    props:
      name:
        type: "str"
        description: >-
          service name, used to identify the service while running it;
          it must be unique in a list of services, otherwise an error will be thrown;
          used as the service key, when the key is not specified
      key:
        type: "str"
        description: >-
          service key, used to identify the service in the services dictionary;
          when not specified, the name will be used as the service key
      when:
        type: "bool"
        description: "when false, the service is ignored (as if it was not defined); defaults to true"
      single:
        type: "bool"
        description: >-
          the service must be a single service, and not a list of services;
          useful in cases in which the service output will be used as input by another service
          (the service name is used to retrieve the previous service input, but in a list,
          the name of the service whose output should be used may not be known directly)
      absent:
        type: "bool"
        description: "when true, deploy the service with the state absent (to destroy the service)"
      tmp:
        type: "bool"
        description: >-
          when true, destroy the service (deploy with state=absent) at the end of the deployment;
          defaults to false, unless the service is in a list of services that defaults to true
          (in such case it defaults to true, unless explicitly defined as false)
      can_destroy:
        type: "bool"
        description: >-
          when true, destroy the service (deploy with state=absent) at the end of the deployment
          when the deployment was launched with the --end option (or --tags=destroy);
          defaults to false, unless the service is in a list of services that defaults to true
          (in such case it defaults to true, unless explicitly defined as false)
      delay_errors:
        type: "bool"
        description: >-
          when true, delays any error that happens in the service (and skips the remaining service tasks),
          failing with an error at the end of the execution; when the service is a list of services,
          defines the flag for all the children services
      ignore_errors:
        type: "bool"
        description: >-
          when true, ignores any error that happens in the service (and skips the remaining service tasks);
          when the service is a list of services, defines the flag for all the children services
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "credential names to override the service credentials"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "contents to override the service contents"
      params:
        type: "dict"
        description: >-
          params to override the service parameters;
          can only be used for single (non-list) services
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: >-
          group_params to override the service parameters;
          can only be used for single (non-list) services
      shared_params:
        type: "list"
        elem_type: "str"
        description: >-
          shared_params to override the service parameters;
          can only be used for single (non-list) services
      shared_group_params:
        type: "str"
        description: >-
          shared_group_params to override the service parameters;
          can only be used for single (non-list) services
  node:
    type: "dict"
    props:
      service:
        schema: "service_info"
        description: >-
          service that will create/destroy the node; required when the node is not local
          nor external, ignored otherwise
      dns_service:
        schema: "destructible_service_info"
        description: >-
          service that will create/destroy the node dns records (based on the ips of the created node);
          throws an error when specified and there is more than 1 node replica;
          throws an error when specified and dns_service_params_list are not defined;
          ignored when the node is local or external
      root:
        type: "bool"
        description: >-
          when true, will run the node instructions (as well as create files and directories)
          as the root user; defaults to false
      base_dir:
        type: "str"
        description: >-
          node base directory in the host (full path) for remote nodes; this directory is used as the base
          directory for node_dir (when not specified), tmp_dir (when not specified)
          and also for the node pods
      node_dir:
        type: "str"
        description: >-
          node directory in the host (full path); this directory is used to transfer node contents (transfer)
          and is the directory from which node shell tasks are executed;
          defaults to '<base_dir>/.node' for remote nodes
      tmp_dir:
        type: "str"
        description: >-
          node directory for temporary files in the host (full path);
          defaults to '<base_dir>/.tmp' for remote nodes
      validator:
        type: "simple_list"
        elem_type: "str"
        elem_required: true
        description: >-
          node validator (or list of validators); will validate the parameters,
          credentials and contents that will be passed to the node; the path
          should be relative to the cloud repository directory; this validation is dynamic,
          the string value should be the task file path that will do the validation
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: >-
          contents to be transferred to the node directory in the host (defined by node_dir);
          these contents will create files in the host that can be used to store host specific
          information or be scripts that may execute tasks in the node, for example;
          the contents receive as the 'input' property a dictionary with a 'dependencies' property
          that has the node dependencies (already prepared for the host)
      pods:
        type: "list"
        elem_schema: "node_pod_info"
        description: "list of pods to be deployed in the node"
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "node credential names dictionary (used as group_params)"
      params:
        type: "dict"
        description: "node params (mergeable parameters)"
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "node group_params (mergeable parameters)"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "node shared_params (mergeable parameters)"
      shared_group_params:
        type: "str"
        description: "node shared_group_params (mergeable parameters)"
  destructible_service_info:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      schema for the information about a given service;
      when defined as a string, it will consider the value to be the service name
    props:
      name:
        type: "str"
        description: >-
          service name, used to identify the service while running it;
          it must be unique in a list of services, otherwise an error will be thrown;
          used as the service key, when the key is not specified
      key:
        type: "str"
        description: >-
          service key, used to identify the service in the services dictionary;
          when not specified, the name will be used as the service key
      when:
        type: "bool"
        description: "when false, the service is ignored (as if it was not defined); defaults to true"
      single:
        type: "bool"
        description: >-
          the service must be a single service, and not a list of services;
          useful in cases in which the service output will be used as input by another service
          (the service name is used to retrieve the previous service input, but in a list,
          the name of the service whose output should be used may not be known directly)
      absent:
        type: "bool"
        description: "when true, deploy the service with the state absent (to destroy the service)"
      can_destroy:
        type: "bool"
        description: >-
          when true, destroy the service (deploy with state=absent) when the task that call the
          service is running with state absent (depends on the task that calls the service
          actually supporting the use of this property)
      delay_errors:
        type: "bool"
        description: >-
          when true, delays any error that happens in the service (and skips the remaining service tasks),
          failing with an error at the end of the execution; when the service is a list of services,
          defines the flag for all the children services
      ignore_errors:
        type: "bool"
        description: >-
          when true, ignores any error that happens in the service (and skips the remaining service tasks);
          when the service is a list of services, defines the flag for all the children services
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "credential names to override the service credentials"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "contents to override the service contents"
      params:
        type: "dict"
        description: >-
          params to override the service parameters;
          can only be used for single (non-list) services
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: >-
          group_params to override the service parameters;
          can only be used for single (non-list) services
      shared_params:
        type: "list"
        elem_type: "str"
        description: >-
          shared_params to override the service parameters;
          can only be used for single (non-list) services
      shared_group_params:
        type: "str"
        description: >-
          shared_group_params to override the service parameters;
          can only be used for single (non-list) services
  node_pod_info:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      schema for the information about a given pod;
      when defined as a string, it will consider the value to be the pod name
    props:
      name:
        type: "str"
        description: >-
          pod name, used to identify the pod while running it;
          it must be unique in a list of pods, otherwise an error will be thrown;
          used as the pod key, when the key is not specified
      key:
        type: "str"
        description: >-
          pod key, used to identify the pod in the pods dictionary;
          when not specified, the name will be used as the pod key
      when:
        type: "bool"
        description: "when false, the pod is ignored (as if it was not defined); defaults to true"
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: >-
          contents to be transferred to the pod repository directory in the host;
          overrides contents to be transferred defined in the pod that have the same destination
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "credential names to override the pod credentials"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "contents to override the pod contents"
      params:
        type: "dict"
        description: "params to override the pod parameters"
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "group_params to override the pod parameters"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "shared_params to override the pod parameters"
      shared_group_params:
        type: "str"
        description: "shared_group_params to override the pod parameters"
  pod:
    type: "dict"
    description: "pod schema"
    props:
      repo:
        type: "str"
        non_empty: true
        description: "pod repository"
      ext_repos:
        type: "list"
        elem_schema: "repo_info"
        description: >-
          list of repository names that extends the pod repository
          and the directories in which they will be cloned
          (relative to the pod repository)
      base_dir:
        type: "str"
        description: >-
          pod base directory (full path in the host);
          defaults to '<node_base_dir>/<pod_name>'
      pod_dir_relpath:
        type: "str"
        description: >-
          pod repository directory relative to the pod base_dir;
          defaults to 'main'; ignored when flat=true
      data_dir:
        type: "str"
        description: >-
          pod data directory (full path in the host);
          defaults to '<pod_base_dir>/data' if 'flat' is not true,
          otherwise defaults to '<node_base_dir>/.pods/<pod_name>/data'
      tmp_dir:
        type: "str"
        description: >-
          pod temporary directory (full path in the host);
          defaults to '<pod_base_dir>/tmp' if 'flat' is not true,
          otherwise defaults to '<node_base_dir>/.pods/<pod_name>/tmp'
      root:
        type: "bool"
        description: >-
          when true, will run the pod preparation tasks (create files and directories)
          as the root user; defaults to the node root property
      flat:
        type: "bool"
        description: >-
          by default, the pod repository directory in the remote host
          is '<pod_base_dir>/<pod_dir_relpath>'; when true, it will be '<pod_base_dir>'
          instead, and the default values of 'data_dir' and 'tmp_dir' will
          be different
      fast_prepare:
        type: "bool"
        description: >-
          by default, the pod preparation step load the pod context (ctx) and
          transfer the files, templates and contents defined in the pod context
          and in the pod transfer property to the pod temporary directory first,
          and if successful will transfer them to the real paths; when this
          property is true, it will only transfer to the real paths, skipping
          the previous step (advisable when in development, for faster deployments)
      ctx:
        type: "str"
        description: >-
          the pod context (not to be confounded with the environment/cloud context
          defined in the 'main' section) defines files and templates to be copied
          to the pod repository (more information in the readme file)
      schema:
        type: "simple_list"
        elem_type: "str"
        elem_required: true
        description: >-
          pod ctx schema (or list of schemas); will validate the parameters,
          credentials and contents that will be passed to the pod context;
          the path should be relative to the pod repository directory
      validator:
        type: "simple_list"
        elem_type: "str"
        elem_required: true
        description: >-
          pod ctx validator (or list of validators); will validate the parameters,
          credentials and contents that will be passed to the pod context; the path
          should be relative to the pod repository directory; this validation is dynamic,
          the string value should be the task file path that will do the validation
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: >-
          contents to be transferred to the pod repository directory;
          the base directory (when the content type is 'custom'),
          is the pod repository directory; the contents receive as the 'input'
          property a dictionary with a 'dependencies' property that has the
          node (that has the pod) dependencies (already prepared for the host)
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "pod credential names dictionary (used as group_params)"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "pod contents dictionary"
      params:
        type: "dict"
        description: "pod params (mergeable parameters)"
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "pod group_params (mergeable parameters)"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "pod shared_params (mergeable parameters)"
      shared_group_params:
        type: "str"
        description: "pod shared_group_params (mergeable parameters)"
  run_stage:
    type: "dict"
    description: "schema for a run stage"
    props:
      tasks:
        type: "list"
        required: true
        elem_type: "simple_dict"
        elem_main_schema: "run_stage_task"
        elem_alternative_schema: "str"
        description: >-
          main option of a stage and the only required option; it represents data about
          run stage tasks; when an item (run stage task) is defined as a string,
          it will consider the value to be the item with the same name defined in the
          'run_stage_tasks' dictionary at the topmost (with no children) section of the
          environment file
      any_errors_fatal:
        type: "bool"
        description: >-
          force any un-handled task errors on any host to propagate to all hosts and end the
          stage/play (only applies to the hosts in the stage)
      gather_facts:
        type: "bool"
        description: >-
          a boolean that controls if the play will automatically run the ‘setup’ task
          to gather facts for the hosts and define facts based on the environment;
          defaults to false (because it's expected that the facts were already gathered
          in previous plays)
      ignore_errors:
        type: "bool"
        description: >-
          boolean that allows you to ignore task failures and continue with play;
          it does not affect connection errors
      ignore_unreachable:
        type: "bool"
        description: >-
          boolean that allows you to ignore task failures due to an unreachable host and continue
          with the play; this does not affect other task errors (see ignore_errors) but is useful
          for groups of volatile/ephemeral hosts
      max_fail_percentage:
        type: "int"
        description: >-
          can be used to abort the run after a given percentage of hosts in the current batch has failed
      serial:
        type: "simple_list"
        elem_type: "primitive"
        description: >-
          maximum number of parallel hosts to run the tasks; can be a number or percentage;
          can be a list to be run in a different number of hosts per batch, with the last batch
          having the hosts that remained, if it's less than the number or percentage passed
      strategy:
        type: "str"
        choices: ["linear", "free", "debug"]
        description: "ansible strategy for the stage (play); defaults to linear"
      throttle:
        type: "int"
        description: >-
          limit number of concurrent task runs on task, block and playbook level;
          this is independent of the forks and serial settings, but cannot be set higher than those limits;
          for example, if forks is set to 10 and the throttle is set to 15, at most 10 hosts will be
          operated on in parallel
      timeout:
        type: "primitive"
        description: >-
          time limit for task to execute in, if exceeded Ansible will interrupt and fail the task
  run_stage_task:
    type: "dict"
    description: "run stage task schema"
    props:
      name:
        type: "str"
        description: >-
          name to identify the task (a run stage mustn't have 2 tasks with the same name);
          used as the task key, when the key is not specified
      key:
        type: "str"
        description: >-
          task key, used to identify the task in the tasks dictionary;
          when not specified, the name will be used as the task key
      when:
        type: "bool"
        description: "when false, the task is ignored (as if it was not defined); defaults to true"
      task_target:
        type: "str"
        non_empty: true
        choices: ["node", "pod"]
        description: >-
          identifies that the task is a node or pod task (will run for the node/pod,
          with the node/pod directory as the workdir/chdir)
      all_nodes:
        type: "bool"
        description: >-
          run the task in all nodes defined in the context
          (or in the nodes pods, when task_target=pod);
          needs to be true, unless nodes is defined (but both must not be defined)
      nodes:
        type: "list"
        elem_schema: "run_stage_task_node"
        description: >-
          run the task in the nodes specified (or in the nodes pods, when task_target=pod);
          needs to be defined, unless all_nodes is true (but both must not be defined)
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "credential names to override the task credentials"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "contents to override the task contents"
      params:
        type: "dict"
        description: "params to override the task parameters"
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "group_params to override the task parameters"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "shared_params to override the task parameters"
      shared_group_params:
        type: "str"
        description: "shared_group_params to override the task parameters"
  run_stage_task_node:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      node information for the task;
      when the value is a string, it's considered to be the name, and all_pods=true
    props:
      name:
        type: "str"
        non_empty: true
        description: "node name to run the task"
      all_pods:
        type: "bool"
        description: >-
          run the task in all pods defined in the node when task_target=pod;
          needs to be true, unless pods is defined (but both must not be defined)
      pods:
        type: "list"
        elem_type: "str"
        description: >-
          run the task in the pods specified when task_target=pod;
          needs to be defined, unless all_pods is true (but both must not be defined)
  task:
    type: "dict"
    props:
      type:
        type: "str"
        non_empty: true
        choices: ["task", "shell", "skip"]
        description: |
          the type of the task:
          - task: runs an ansible task with the parameters specified
          - shell: runs a shell command
          - skip: skips the task
      target_origin:
        type: "str"
        choices: ["env", "cloud", "pod"]
        description: |
          (when type=task) the base path for the task and schema files:
          - env: the environment repository
          - cloud: the cloud repository
          - pod: the pod repository
      file:
        type: "str"
        description: >-
          (when type=task) location of the file that will run the (ansible) task;
          the base path depends on the target_origin
      cmd:
        type: "str"
        description: >-
          (when type=shell) the command that will run in the host;
          will run in the node directory for node tasks, and in the
          pod repository directory for pod tasks (workdir/chdir)
      sync:
        type: "bool"
        description: >-
          (when type=shell) the command that will run in the host
          will run synchronously when this property is true; defaults
          to false
      poll:
        type: "int"
        description: >-
          (when type=shell and sync=false) time, in seconds, to wait between
          2 consecutives tries to capture the task logs and to verify if the task
          ended (may take a bit more time because it doesn't consider the time it
          took to do these steps); a lesser value means more network requests
          and faster feedback; defaults to 2 seconds
      root:
        type: "bool"
        description: "when true, will run the task as the root user"
      schema:
        type: "simple_list"
        elem_type: "str"
        elem_required: true
        description: >-
          (when type=task) task schema (or list of schemas); will validate the
          parameters, credentials and contents that will be passed to the task;
          the base path depends on the target_origin
      validator:
        type: "simple_list"
        elem_type: "str"
        elem_required: true
        description: >-
          (when type=task) task validator (or list of validators); will validate
          the parameters, credentials and contents that will be passed to the task;
          the base path depends on the target_origin; this validation is dynamic,
          the string value should be the task file path that will do the validation
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "(when type=task) task credential names dictionary (used as group_params)"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "(when type=task) task contents dictionary"
      params:
        type: "dict"
        description: "(when type=task) task params (mergeable parameters)"
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "(when type=task) task group_params (mergeable parameters)"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "(when type=task) task shared_params (mergeable parameters)"
      shared_group_params:
        type: "str"
        description: "(when type=task) task shared_group_params (mergeable parameters)"
  content:
    type: "simple_dict"
    alternative_type: "str"
    description: "content schema (used when content type is env)"
    props:
      type:
        type: "str"
        choices: ["str", "file", "template", "env"]
        description: "content type"
      name:
        type: "str"
        description: "content name (when type is env)"
      key:
        type: "str"
        description: "content key (when type is env)"
      origin:
        type: "str"
        choices: ["custom", "env", "cloud"]
        description: >-
          content origin; defaults to custom
          (the custom origin path depends on where the content is specified)
      file:
        type: "str"
        description: "content file (when type is file or template)"
      schema:
        type: "simple_list"
        elem_type: "str"
        elem_required: true
        description: "schema (or list of schemas) for the content (when type is template)"
      validator:
        type: "simple_list"
        elem_type: "str"
        elem_required: true
        description: "validator (or list of validators) for the content (when type is template)"
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "content credentials (when type is template)"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "content inner contents (when type is template)"
      params:
        type: "dict"
        description: "content params (when type is env, str or template)"
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "content group_params (when type is env, str or template)"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "content shared_params (when type is env, str or template)"
      shared_group_params:
        type: "str"
        description: "content shared_group_params (when type is env, str or template)"
  repo:
    type: "dict"
    description: "repository schema"
    props:
      src:
        type: "str"
        non_empty: true
        description: "repository source"
      version:
        type: "str"
        description: "repository version"
      ssh_file:
        type: "str"
        description: "repository ssh file (used for authentication)"
  shared_group_params:
    type: "map"
    elem_key_regex: "^[-\\w]+$"
    elem_type: "str"
    description: "shared_group_params schema"
