root: "node_schema"
schemas:
  node_schema:
    type: "dict"
    description: "node schema"
    props:
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "credential"
        description: "node credentials"
      params:
        schema: "params"
        description: "node params"
      input:
        type: "dict"
        non_empty: true
        description: "node input params"
  credential:
    type: "dict"
    description: "node credential schema"
    props:
      host_user:
        type: "str"
        non_empty: true
        description: >-
          host user that will execute the instructions in the node;
          also used when creating files and directories in the node (owner)
      host_group:
        type: "str"
        description: >-
          host group to be used when creating files and directories in the node
          (owner), defaults to the host user
      host_pass:
        type: "str"
        description: "password of the host user"
      ssh_file:
        type: "str"
        description: "ssh key file used to connect to the node (host)"
  params:
    type: "dict"
    description: "node params schema"
    props:
      main_host_user_key:
        type: "str"
        description: >-
          string representing the credential (name) that has the main host user data
          (like name and ssh file); defaults to 'host'; the main host user is the host
          user that will generally run the tasks in the host (the other users can run
          tasks only in the setup step)
      host_users:
        type: "list"
        elem_schema: "node_setup"
        description: >-
          list of strings or dictionaries representing the credential (names) that have
          the host users data (like user name and ssh file, for each user) together with
          specifications for the setup (like timeouts); defaults to [<main_host_user_key>];
          the value of 'main_host_user_key' must be present (be a name) in the list; when
          defined as a string, will be equivalent to a dictionary with the name property
          with the same value (and no other property defined)
      service_params:
        type: "dict"
        description: >-
          parameters to be defined for the service that will create/destroy the node;
          the parameters defined here will override the parameters defined for the service
      dns_service_params_list:
        type: "list"
        elem_schema: "dns"
        description: >-
          list with dns records to create A and AAAA records
          (when dns_service is specified for the node); will use
          the node ips returned by the service that created the node
      cron:
        type: "list"
        elem_schema: "cron"
        description: "list of cron jobs to be created in the host"
      cron_start:
        type: "bool"
        description: "specify if the cron service must be started (when stopped)"
  node_setup:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      tests to verify if can connect to the host and if the host was initialized successfully
    props:
      name:
        type: "str"
        non_empty: true
        regex: "^[-\\w]+$"
        description: "the host user identifier (must be associated with a credential with the same name)"
      initial_connection_timeout:
        type: "int"
        description: "timeout in seconds for the initial connection to the host"
      setup_log_file:
        type: "str"
        description: "log file used to verify if the host setup was completed"
      setup_finished_log_regex:
        type: "str"
        description: "regex applied to the log file used to determine if the setup ended"
      setup_success_log_last_line:
        type: "str"
        description: "last line expected in the log file in the case of a successful setup"
      setup_finished_timeout:
        type: "int"
        description: "timeout in seconds while waiting for the host setup to complete"
      skip_setup:
        type: "bool"
        description: >-
          when true, skips the setup step (that verifies if the connection is reachable and
          validates if the setup ended successfully)
  cron:
    type: "dict"
    props:
      when:
        type: "bool"
        description: "when false, the cron job is ignored; defaults to true"
      user:
        type: "str"
        non_empty: true
        description: "user that will execute the cron job"
      src:
        schema: "content"
        non_empty: true
        description: "source content (can be a file) with the cron jobs"
      dest:
        type: "str"
        non_empty: true
        description: "destination file in which the cron jobs will be specified"
  dns:
    type: "dict"
    description: "dns record information schema"
    props:
      record:
        type: "str"
        non_empty: true
        description: "dns record (like a subdomain, for example)"
      ttl:
        type: "int"
        description: "dns record ttl"
  content:
    type: "simple_dict"
    alternative_type: "str"
    description: "content schema (used when content type is env)"
    props:
      type:
        type: "str"
        choices: ["str", "file", "template", "env"]
        description: "content type"
      name:
        type: "str"
        description: "content name (when type is env)"
      key:
        type: "str"
        description: "content key (when type is env)"
      origin:
        type: "str"
        choices: ["custom", "env", "cloud"]
        description: >-
          content origin; defaults to custom
          (the custom origin path depends on where the content is specified)
      file:
        type: "str"
        description: "content file (when type is file or template)"
      schema:
        type: "simple_list"
        elem_type: "str"
        elem_non_empty: true
        description: "schema (or list of schemas) for the content (when type is template)"
      credentials:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "content credentials (when type is template)"
      contents:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_schema: "content"
        description: "content inner contents (when type is template)"
      params:
        type: "dict"
        description: "content params (when type is env, str or template)"
      group_params:
        type: "map"
        elem_key_regex: "^[-\\w]+$"
        elem_type: "str"
        description: "content group_params (when type is env, str or template)"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "content shared_params (when type is env, str or template)"
      shared_group_params:
        type: "str"
        description: "content shared_group_params (when type is env, str or template)"
