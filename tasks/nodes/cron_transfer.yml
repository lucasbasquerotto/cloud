# Cron File (Tmp)

- name: "{{ cron_transfer_title }} - create the temporary directory"
  become: "{{ cron_transfer_become | default(false) | bool }}"
  file:
    state: directory
    path: "{{ cron_tmp_dir }}"
  no_log: "{{ env_no_log }}"

- name: "{{ cron_transfer_title }} - ensure the crontab file is present"
  become: "{{ cron_transfer_become | default(false) | bool }}"
  copy:
    content: ""
    force: no
    dest: "{{ cron_tmp_dir }}/backup.cron"
    owner: "{{ cron_transfer_user | default(omit, true) }}"
    group: "{{ cron_transfer_group | default(omit, true) }}"
  no_log: "{{ env_no_log }}"

- name: "{{ cron_transfer_title }} - transfer (outer)"
  include_tasks: "tasks/util/transfer.yml"
  vars:
    transfer_title: "{{ cron_transfer_title }} - transfer new content (tmp)"
    transfer_become: "{{ cron_transfer_become | default(false) }}"
    transfer_user: "{{ cron_transfer_user | default('') }}"
    transfer_group: "{{ cron_transfer_group | default('') }}"
    transfer_input: "{{ cron_node_transfer_input }}"
    transfer_prepared: true
    transfer_list:
      - content: "{{ cron_transfer_src }}"
        dest: "{{ cron_tmp_dir }}/new.cron"
        tmp_dest: "{{ cron_tmp_dir }}/new.cron.tmp"
        mode: "{{ cron_transfer_mode | default('') }}"
        no_empty_lines: "{{ env.meta.template_no_empty_lines | default(false) }}"
  no_log: "{{ env_no_log }}"
  tags: ["no_print_skipped"]

- name: "{{ cron_transfer_title }} - copy the temporary cron files"
  become: "{{ cron_transfer_become | default(false) | bool }}"
  copy:
    remote_src: true
    src: "{{ cron_transfer_item.src }}"
    dest: "{{ cron_tmp_dir }}/{{ cron_transfer_item.name }}"
    owner: "{{ cron_transfer_user | default(omit, true) }}"
    group: "{{ cron_transfer_group | default(omit, true) }}"
    mode: 0600
  loop:
    - name: "old.tmp.cron"
      src: "{{ cron_tmp_dir }}/backup.cron"
    - name: "new.tmp.cron"
      src: "{{ cron_tmp_dir }}/new.cron"
  loop_control:
    loop_var: cron_transfer_item
    label: "{{ cron_transfer_item.name }}"
  changed_when: false
  no_log: "{{ env_no_log }}"

- name: "{{ cron_transfer_title }} - remove the comments from cron files"
  become: "{{ cron_transfer_become | default(false) | bool }}"
  lineinfile:
    path: "{{ cron_tmp_dir }}/{{ cron_transfer_item }}"
    state: absent
    regexp: "^#"
  loop:
    - "old.tmp.cron"
    - "new.tmp.cron"
  loop_control:
    loop_var: cron_transfer_item
  changed_when: false
  no_log: "{{ env_no_log }}"

# Cron File - Update When Changed

- name: "{{ cron_transfer_title }} - get the difference of the 2 files (old and new)"
  become: "{{ cron_transfer_become | default(false) | bool }}"
  command: "diff {{ cron_tmp_dir + '/old.tmp.cron' }} {{ cron_tmp_dir + '/new.tmp.cron' }}"
  register: cron_diff
  failed_when: cron_diff.rc > 1
  changed_when: cron_diff.rc == 1
  no_log: "{{ env_no_log }}"

- block:
    - name: "{{ project_ctx_title }} - create the crontab directory (if needed)"
      file:
        path: "{{ cron_transfer_dest | dirname }}"
        state: directory
      no_log: "{{ env_no_log }}"
      tags: ["no_print_skipped"]

    - name: >-
        {{ cron_transfer_title }} - ensure the crontab file is up-to-date
        ({{ cron_transfer_dest }})
      become: "{{ cron_transfer_become | default(false) | bool }}"
      copy:
        remote_src: true
        src: "{{ cron_tmp_dir + '/new.cron' }}"
        dest: "{{ cron_transfer_dest }}"
        owner: "{{ cron_transfer_user | default(omit, true) }}"
        group: "{{ cron_transfer_group | default(omit, true) }}"
        mode: 0600

    - name: "{{ cron_transfer_title }} - ensure the crontab file is active"
      become: "{{ cron_transfer_become | default(false) | bool }}"
      shell: "crontab '{{ cron_transfer_dest }}'"

    - name: "{{ cron_transfer_title }} - copy the new cron file as backup"
      become: "{{ cron_transfer_become | default(false) | bool }}"
      copy:
        remote_src: true
        src: "{{ cron_transfer_dest }}"
        dest: "{{ cron_tmp_dir + '/backup.cron' }}"
        owner: "{{ cron_transfer_user | default(omit, true) }}"
        group: "{{ cron_transfer_group | default(omit, true) }}"
        mode: 0600
      changed_when: false
  when: cron_diff.changed
  no_log: "{{ env_no_log }}"
  tags: ["no_print_skipped"]
